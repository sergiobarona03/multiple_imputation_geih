poverty_dieta_3$dummy = NA
z = mean(model_dieta_3$per_capita)
for (k in 1:nrow(poverty_dieta_3)) {
if (poverty_dieta_3$per_capita_dia[k] < z) {
poverty_dieta_3$dummy[k] = 1
} else {
poverty_dieta_3$dummy[k] = 0
}
}
# calcular brecha relativa para cada hogar
poverty_dieta_3$brecha_rel =  ((z - poverty_dieta_3$per_capita_dia)/z)*poverty_dieta_3$dummy
# calcular el cuadrado de la brecha relativa
poverty_dieta_3$brecha_rel_sqr = poverty_dieta_3$brecha_rel^2
# calculo de indices
N = sum(poverty_dieta_3$FEX_C18)
poverty_3_outcome = as.data.frame(matrix(ncol=4))
colnames(poverty_3_outcome) = c("tipo", "tasa", "brecha", "severidad")
poverty_3_outcome$tipo = "Dieta saludable"
poverty_3_outcome$tasa = (sum(poverty_dieta_3$dummy*poverty_dieta_3$FEX_C18)/N)*100
poverty_3_outcome$brecha = sum(poverty_dieta_3$brecha_rel*poverty_dieta_3$FEX_C18)/N
poverty_3_outcome$severidad = sum(poverty_dieta_3$brecha_rel_sqr*poverty_dieta_3$FEX_C18)/N
############################
## Resultados generales   ##
############################
# Tabla de índices
household_poverty_outcome = rbind(poverty_1_outcome, poverty_2_outcome)
household_poverty_outcome = rbind(household_poverty_outcome, poverty_3_outcome)
household_poverty_outcome
setwd("~/Desktop/proyecto_banrep_ciat")
# 5111-solucion-modelo-1-femenino.R
library(here)
source(here::here("programacion_modular/modulo_5/modelo_1/modelo_1_femenino", "5110-construccion_modelo_1_femenino.R"))
# 5111-solucion-modelo-1-femenino.R
library(here)
source(here::here("programacion_modular/modulo_5/modelo_1/modelo_1_femenino", "5110-construccion_modelo_1_femenino.R"))
# base de datos de resultados
modelo_1 = data.frame(alimentos)
modelo_1 = modelo_1 %>% add_row(alimentos = "Costo")
colnames(modelo_1) = "Alimentos"
edad = c("[1, 4)", "[4, 9)", "[9, 14)", "[14, 19)", "[19, 31)", "[31, 50)",
"[51, 70)", ">70", "gestantes < 18 años", "gestantes 19 a 30 años",
"gestantes 31 a 50 años", "lactantes < 18 años", "lactantes 19 a 30 años",
"lactantes 31 a 50 años")
#solucion del modelo
for (i in 1:14) {
print(edad[i])
df_1 = data.frame()
df_2 = data.frame()
b = dri_edad[[i]]
opt_sol = lp(direction = "min",
objective.in = precios,
const.mat = A,
const.dir = constr_signs,
const.rhs = b,
compute.sens = TRUE)
df_1 = cbind(alimentos, opt_sol$solution)
colnames(df_1) = c("Alimentos", edad[i])
df_2 = data.frame("Costo", opt_sol$objval)
colnames(df_2) = colnames(df_1)
df_1 = rbind(df_1, df_2)
modelo_1 = merge(modelo_1,df_1, by = "Alimentos")
rm(b, df_1, df_2)
}
#eliminar cantidades NA
modelo_1[modelo_1 == 0] = NA
modelo_1_res = modelo_1[rowSums(is.na(modelo_1[,2:length(colnames(modelo_1))])) != ncol(modelo_1[,2:length(colnames(modelo_1))]),]
#presentaci?n del resultado en gramos
modelo_1_res[nrow(modelo_1_res)+1,] = modelo_1_res[1,]
for (k in 2:ncol(modelo_1_res)) {
modelo_1_res[3,k] = as.numeric(modelo_1_res[1,k])*100
}
modelo_1_res[3,1] = paste0(modelo_1_res[1,1],"(g)")
modelo_1_res = modelo_1_res[c(1,3,2),]
saveRDS(modelo_1_res, here::here("resultados_generales/modelo_1",
paste0("modelo_1_femenino_",muestra,".RDS")))
View(modelo_1_res)
costo_azucar = modelo_1_res[,3]
costo_azucar
costo_azucar = modelo_1_res[3,]
costo_azucar
as.numeric(costo_azucar)
costo_azucar = costo_azucar[-1]
costo_azucar
View(datos)
# excluir harina y azucar
datos_x = datos
datos_x$ratio = datos_x$Precio_100g_ajust/datos_x$Energia
datos_x = datos_x[order(datos_x$ratio),]
View(datos_x)
# excluir azúcar porque no es viable (K003 y K004)
datos_x = datos_x %>% filter(!Cod_TCAC %in% c("K003", "K004"))
# excluir azúcar porque no es viable (K003 y K004)
datos = datos %>% filter(!Cod_TCAC %in% c("K003", "K004"))
# vector de precios
precios = datos$Precio_100g_ajust
# nombre alimentos
alimentos=datos$Alimento
# vector de contenidos energéticos
A = matrix(as.vector(datos$Energia), ncol = length(alimentos))
# base de datos de resultados
modelo_1 = data.frame(alimentos)
modelo_1 = modelo_1 %>% add_row(alimentos = "Costo")
colnames(modelo_1) = "Alimentos"
edad = c("[1, 4)", "[4, 9)", "[9, 14)", "[14, 19)", "[19, 31)", "[31, 50)",
"[51, 70)", ">70", "gestantes < 18 años", "gestantes 19 a 30 años",
"gestantes 31 a 50 años", "lactantes < 18 años", "lactantes 19 a 30 años",
"lactantes 31 a 50 años")
#solucion del modelo
for (i in 1:14) {
print(edad[i])
df_1 = data.frame()
df_2 = data.frame()
b = dri_edad[[i]]
opt_sol = lp(direction = "min",
objective.in = precios,
const.mat = A,
const.dir = constr_signs,
const.rhs = b,
compute.sens = TRUE)
df_1 = cbind(alimentos, opt_sol$solution)
colnames(df_1) = c("Alimentos", edad[i])
df_2 = data.frame("Costo", opt_sol$objval)
colnames(df_2) = colnames(df_1)
df_1 = rbind(df_1, df_2)
modelo_1 = merge(modelo_1,df_1, by = "Alimentos")
rm(b, df_1, df_2)
}
#eliminar cantidades NA
modelo_1[modelo_1 == 0] = NA
modelo_1_res = modelo_1[rowSums(is.na(modelo_1[,2:length(colnames(modelo_1))])) != ncol(modelo_1[,2:length(colnames(modelo_1))]),]
#presentaci?n del resultado en gramos
modelo_1_res[nrow(modelo_1_res)+1,] = modelo_1_res[1,]
for (k in 2:ncol(modelo_1_res)) {
modelo_1_res[3,k] = as.numeric(modelo_1_res[1,k])*100
}
modelo_1_res[3,1] = paste0(modelo_1_res[1,1],"(g)")
modelo_1_res = modelo_1_res[c(1,3,2),]
modelo_1_res
saveRDS(modelo_1_res, here::here("resultados_generales/modelo_1",
paste0("modelo_1_femenino_",muestra,".RDS")))
dri_edad
colnames(data)
modelo_1
modelo_1_res
modelo_1_res[1,1]
energia_modelo_1 = data %>% filter(Alimento %in%
modelo_1_res[1,1])
energia_modelo_1
# valores optimos para cada grupo demografico
optimo = list()
length(optimo) = length(edad)
optimo
modelo_!_res[,2]
modelo_1_res[,2]
modelo_1_res[2,]
solucion_grupos =  modelo_!_res[,2]
solucion_grupos =  modelo_1_res[,2]
solucion_grupos =  modelo_1_res[,1]
solucion_grupos
solucion_grupos =  modelo_1_res[1,]
solucion_grupos
k = 1
solucion_grupos[1,k+1]
length(optimo) = length(edad) = length(desv)
for (k in 2:length(optimo)) {
optimo[[k]] = solucion_grupos[1,k]
desv[[k]] = optimo[[k]] - dri_edad[[k]]
}
k = 1
optimo[[k]] = solucion_grupos[1,k]
desv[[k]] = optimo[[k]] - dri_edad[[k]]
dri_edad[[k]]
optimo[[k]]
k =2
optimo[[k]] = solucion_grupos[1,k]
optimo[[k]]
for (k in 1:(length(optimo)-1)) {
optimo[[k]] = solucion_grupos[1,k+1]
desv[[k]] = optimo[[k]] - dri_edad[[k]]
}
k = 1
optimo[[k]] = solucion_grupos[1,k+1]
desv[[k]] = optimo[[k]] - dri_edad[[k]]
optimo[[k]]
for (k in 1:(length(optimo)-1)) {
optimo[[k]] = as.numeric(solucion_grupos[1,k+1])
desv[[k]] = optimo[[k]] - dri_edad[[k]]
}
# valores optimos para cada grupo demografico
optimo = list()
desv = list()
length(optimo) = length(edad) = length(desv)
solucion_grupos =  modelo_1_res[1,]
for (k in 1:(length(optimo)-1)) {
optimo[[k]] = as.numeric(solucion_grupos[1,k+1])
desv[[k]] = optimo[[k]] - dri_edad[[k]]
}
desv
k = 1
optimo[[k]] = as.numeric(solucion_grupos[1,k+1])
optimo[[k]]
desv[[k]] = optimo[[k]] - dri_edad[[k]]
desv
optimo[[k]] = as.numeric(solucion_grupos[1,k+1])*energia_modelo_1$Energia
desv[[k]] = optimo[[k]] - dri_edad[[k]]
desv[[k]]
optimo[[k]]
dri_edad[[k]]
optimo = list()
desv = list()
length(optimo) = length(edad) = length(desv)
solucion_grupos =  modelo_1_res[1,]
for (k in 1:(length(optimo)-1)) {
optimo[[k]] = as.numeric(solucion_grupos[1,k+1])*energia_modelo_1$Energia
desv[[k]] = optimo[[k]] - dri_edad[[k]]
}
length(optimo)
# valores optimos para cada grupo demografico
optimo = list()
desv = list()
length(optimo) = length(edad) = length(desv)
length(optimo)
length(edad)
edad = c("[1, 4)", "[4, 9)", "[9, 14)", "[14, 19)", "[19, 31)", "[31, 50)",
"[51, 70)", ">70", "gestantes < 18 años", "gestantes 19 a 30 años",
"gestantes 31 a 50 años", "lactantes < 18 años", "lactantes 19 a 30 años",
"lactantes 31 a 50 años")
length(edafd)
length(edad)
# valores optimos para cada grupo demografico
optimo = list()
desv = list()
length(optimo) = length(edad) = length(desv)
solucion_grupos =  modelo_1_res[1,]
for (k in 1:(length(optimo)-1)) {
optimo[[k]] = as.numeric(solucion_grupos[1,k+1])*energia_modelo_1$Energia
desv[[k]] = optimo[[k]] - dri_edad[[k]]
}
desv[[k]]
desv
length(optimo) = length(edad) = length(desv) = n
for (k in 1:n) {
optimo[[k]] = as.numeric(solucion_grupos[1,k+1])*energia_modelo_1$Energia
desv[[k]] = optimo[[k]] - dri_edad[[k]]
}
n
length(optimo) = length(edad) = length(desv) = n
n = length(optimo) = length(edad) = length(desv)
n
length(optimo) = length(edad) = length(desv)
n = length(optimo)
n
length(desv)  = length(optimo)
n = length(optimo)
length(optimo) = length(edad)
length(desv)  = length(optimo)
n = length(optimo)
n
edad = c("[1, 4)", "[4, 9)", "[9, 14)", "[14, 19)", "[19, 31)", "[31, 50)",
"[51, 70)", ">70", "gestantes < 18 años", "gestantes 19 a 30 años",
"gestantes 31 a 50 años", "lactantes < 18 años", "lactantes 19 a 30 años",
"lactantes 31 a 50 años")
length(optimo) = length(edad)
length(desv)  = length(optimo)
n = length(optimo)
n
for (k in 1:n) {
optimo[[k]] = as.numeric(solucion_grupos[1,k+1])*energia_modelo_1$Energia
desv[[k]] = optimo[[k]] - dri_edad[[k]]
}
desv
solucion_grupos[1,14+1]
# guardar modelo verificado
saveRDS(modelo_1_res, here::here("resultados_generales/modelos_verificados/modelo_1",
paste0("modelo_1_femenino_",muestra,".RDS")))
#signos de las restricciones lineales
constr_signs = c("=")
#requerimientos de energia por edad
dri_edad = list()
for (i in 1:8) {
b = vector()
b = DRI_m[i,2]
dri_edad = append(dri_edad, b)
names(dri_edad)[i] = paste0("b_", i)
}
# base de datos de resultados
modelo_1 = data.frame(alimentos)
modelo_1 = modelo_1 %>% add_row(alimentos = "Costo")
colnames(modelo_1) = "Alimentos"
edad = c("[1, 4)", "[4, 9)", "[9, 14)", "[14, 19)", "[19, 31)", "[31, 50)", "[51, 70)", ">70")
#solucion del modelo
for (i in 1:8) {
print(edad[i])
df_1 = data.frame()
df_2 = data.frame()
b = dri_edad[[i]]
opt_sol = lp(direction = "min",
objective.in = precios,
const.mat = A,
const.dir = constr_signs,
const.rhs = b,
compute.sens = TRUE)
df_1 = cbind(alimentos, opt_sol$solution)
colnames(df_1) = c("Alimentos", edad[i])
df_2 = data.frame("Costo", opt_sol$objval)
colnames(df_2) = colnames(df_1)
df_1 = rbind(df_1, df_2)
modelo_1 = merge(modelo_1,df_1, by = "Alimentos")
rm(b, df_1, df_2)
}
# presentacion de la solucion por grupos etarios
#eliminar cantidades NA
modelo_1[modelo_1 == 0] = NA
modelo_1_res = modelo_1[rowSums(is.na(modelo_1[,2:length(colnames(modelo_1))])) != ncol(modelo_1[,2:length(colnames(modelo_1))]),]
#presentaci?n del resultado en gramos
modelo_1_res[nrow(modelo_1_res)+1,] = modelo_1_res[1,]
for (k in 2:ncol(modelo_1_res)) {
modelo_1_res[3,k] = as.numeric(modelo_1_res[1,k])*100
}
modelo_1_res[3,1] = paste0(modelo_1_res[1,1],"(g)")
modelo_1_res = modelo_1_res[c(1,3,2),]
#resultado diferenciado por grupos etarios
saveRDS(modelo_1_res, here::here("resultados_generales/modelo_1",
paste0("modelo_1_masculino_",muestra,".RDS")))
modelo_1_res
# vector de energía para el alimento seleccionado
energia_modelo_1 = data %>% filter(Alimento %in%
modelo_1_res[1,1])
# valores optimos para cada grupo demografico
optimo = list()
desv = list()
length(optimo) = length(edad)
length(desv)  = length(optimo)
n = length(optimo)
solucion_grupos =  modelo_1_res[1,]
for (k in 1:n) {
optimo[[k]] = as.numeric(solucion_grupos[1,k+1])*energia_modelo_1$Energia
desv[[k]] = optimo[[k]] - dri_edad[[k]]
}
desv
dri_edad
# guardar modelo verificado
saveRDS(modelo_1_res, here::here("resultados_generales/modelos_verificados/modelo_1",
paste0("modelo_1_masculino_",muestra,".RDS")))
library(here)
source(here::here("programacion_modular/modulo_5/modelo_2/modelo_2_femenino", "5210-construccion_modelo_2_femenino.R"))
# base de datos para la presentacion de resultados
modelo_2 = data.frame(alimentos)
modelo_2 = modelo_2 %>% add_row(alimentos = "Costo")
colnames(modelo_2) = "Alimentos"
edad = c("[1, 4)", "[4, 9)", "[9, 14)", "[14, 19)", "[19, 31)", "[31, 50)",
"[51, 70)", ">70", "gestantes < 18 años", "gestantes 19 a 30 años",
"gestantes 31 a 50 años", "lactantes < 18 años", "lactantes 19 a 30 años",
"lactantes 31 a 50 años")
nutrientes = c("Grupo", "Nutriente", "Proteina", "Lipidos", "Carbohidratos", "VitaminaC",
"Folatos" , "VitaminaA" ,    "Tiamina"  ,     "Riboflavina" ,
"Niacina" , "VitaminaB12" , "Magnesio" , "Fosforo", "Sodio" ,
"Calcio"  , "Hierro", "Zinc")
const_2 = as.data.frame(matrix(ncol = length(nutrientes)))
colnames(const_2) = nutrientes
const_2  = na.omit(const_2)
#solucion del modelo
for (i in 1:14) {
print(edad[i])
#resolver el modelo
df_1 = data.frame()
df_2 = data.frame()
b = b_2[[i]]
opt_sol = lp(direction = "min",
objective.in = precios,
const.mat = A,
const.dir = constr_signs,
const.rhs = b,
compute.sens = TRUE)
df_1 = cbind(alimentos, opt_sol$solution)
colnames(df_1) = c("Alimentos", edad[i])
df_2 = data.frame("Costo", opt_sol$objval)
colnames(df_2) = colnames(df_1)
df_1 = rbind(df_1, df_2)
modelo_2 = merge(modelo_2,df_1, by = "Alimentos")
rm(b, df_1, df_2)
#cumplimiento de las restricciones
const = A[1:17,]%*%as.matrix(opt_sol$solution)
const = data.frame(rownames(const), as.numeric(const))
const = const[-1,]
const = cbind(const, as.matrix(lower_list[[i]]))
colnames(const) = c("Nutriente", "Opt", "Rest")
const$Dif = ((const$Opt - const$Rest)/const$Rest)*100
const[const<0] <- 0
#redondear
for (k in 1:nrow(const)) {
for (l in 2:ncol(const)) {
const[k,l] = round(as.numeric(const[k,l]), digits = 2)
}
}
colnames(const)[which(colnames(const) == "Dif")] = paste0("Dif", " (%)")
const = as.data.frame(t(const))
colnames(const) = as.character(const[1,])
const = const[-1,]
const[,ncol(const)+ 1] = rownames(const)
const[,ncol(const)+ 1] = c(edad[i], edad[i], edad[i])
const = const[,c(ncol(const), (ncol(const)-1),1:(ncol(const)-2))]
rownames(const) = seq(1, nrow(const), by = 1)
colnames(const)[1] = "Grupo"
colnames(const)[2] = "Nutriente"
const_2 = rbind(const_2, const)
rm(const)
}
#preparacion de resultados en gramos
modelo_2[modelo_2 == 0] = NA
modelo_2_res = modelo_2[rowSums(is.na(modelo_2[,2:length(colnames(modelo_2))])) != ncol(modelo_2[,2:length(colnames(modelo_2))]),]
modelo_2_res = modelo_2_res[-which(modelo_2_res$Alimentos == "Costo"),]
#presentacion de resultados en gramos
for (k in 2:ncol(modelo_2_res)) {
modelo_2_res[,k] = as.numeric(modelo_2_res[,k])*100
}
modelo_2_res[nrow(modelo_2_res)+1, ] = modelo_2[which(modelo_2$Alimentos == "Costo"),]
modelo_2_res[is.na(modelo_2_res)] = 0
View(modelo_2_res)
modelo_3_costo
household_poverty_outcome
datos <- readRDS(here::here("resultados_generales","data.RDS"))
DRI_m <- readRDS(here::here("bases_de_datos/requerimientos","DRI_m.RDS"))
DRI_f <- readRDS(here::here("bases_de_datos/requerimientos","DRI_f.RDS"))
colnames(datos)
alimentos_solucion = setdiff(alimentos_solucion, "Costo")
#############################
## Verificacion de precios ##
#############################
alimentos_solucion = levels(as.factor(modelo_2_res$Alimentos))
alimentos_solucion = setdiff(alimentos_solucion, "Costo")
colnames(datos)
alimentos_precios = datos[c("Alimento", "Precio_100_g_ajust")] %>% filter(Alimento %in% alimentos_solucion)
alimentos_solucion
datos[c("Alimento", "Precio_100_g_ajust")]
alimentos_precios = datos[c("Alimento", "Precio_100g_ajust")] %>% filter(Alimento %in% alimentos_solucion)
alimentos_precios
alimentos_precios$Precio_libra = alimentos_precios$Precio_100g_ajust*5
View(alimentos_precios)
View(precios_minoristas)
precios_mayoristas_grupos = readRDS(here::here("resultados_generales/precios_mayoristas_vs_minoristas",
paste0("precios_mayorista_minorista_",muestra,".RDS"))
)
precios_mayoristas_grupos = readRDS(here::here("resultados_generales/precios_mayoristas_vs_minoristas",
paste0("precios_mayorista_minorista_","septiembre",".RDS")))
# precios minoristas vs precios mayoristas
precios_mayoristas_grupos = readRDS(here::here("resultados_generales/precios_mayoristas_vs_minoristas",
paste0("precios_mayorista_minorista_","septiembre",".RDS")))
View(precios_mayoristas_grupos)
alimentos_precios$Precio_kg = alimentos_precios$Precio_100g_ajust*10
alimentos_precios = merge(alimentos_precios, precios_mayoristas_grupos,
by = "Alimento")
View(alimentos_precios)
alimentos_solucion = levels(as.factor(modelo_2_res$Alimentos))
alimentos_solucion = setdiff(alimentos_solucion, "Costo")
alimentos_precios = datos[c("Alimento", "Precio_100g_ajust")] %>% filter(Alimento %in% alimentos_solucion)
alimentos_precios$Precio_mayorista_kg = alimentos_precios$Precio_100g_ajust*10
alimentos_precios = merge(alimentos_precios, precios_mayoristas_grupos,
by = "Alimento")
alimentos_precios$diferencia = (alimentos_precios$Precio_minorista_kg - alimentos_precios$Precio_mayorista_kg)/alimentos_precios$Precio_mayorista_kg
alimentos_precios$diferencia = alimentos_precios$diferencia*100
error = sum(alimentos_precios$diferencia)
error
error = sum(alimentos_precios$diferencia, na.rm = TRUE)
erro
error
# ordenar por grupos
alimentos_precios = alimentos_precios[order(alimentos_precios$Grupo)]
# ordenar por grupos
alimentos_precios = alimentos_precios[order(alimentos_precios$Grupo),]
alimentos_precios
may = sum(alimentos_precios$Precio_100g_ajust)
min = sum(alimentos_precios$Precio_minorista_kg/10)
may
min
min = sum(alimentos_precios$Precio_minorista_kg/10, na.rm =TRUE)
min
setwd("~/Desktop/multiple_imputation_geih")
getwd()
getwd()
library(here)
source(here::here("script_asequibilidad/", "33-tercera-aprox.R"))
# cargar base de datos para imputar
setwd("/Users/sergiobarona03/Desktop/multiple_imputation_geih")
library(here)
source(here::here("script_asequibilidad/", "33-tercera-aprox.R"))
# cargar base de datos para imputar
setwd("/Users/sergiobarona03/Desktop/multiple_imputation_geih")
library(here)
source(here::here("script_asequibilidad/", "33-tercera-aprox.R"))
# cargar base de datos para imputar
setwd("/Users/sergiobarona03/Desktop/multiple_imputation_geih")
library(here)
source(here::here("script_asequibilidad/", "33-tercera-aprox.R"))
# cargar base de datos para imputar
setwd("/Users/sergiobarona03/Desktop/multiple_imputation_geih")
library(here)
source(here::here("script_asequibilidad/", "33-tercera-aprox.R"))
# cargar base de datos para imputar
setwd("/Users/sergiobarona03/Desktop/multiple_imputation_geih")
library(here)
source(here::here("script_asequibilidad/", "33-tercera-aprox.R"))
########################
## 33-tercera-aprox.R ##
########################
library(here)
source(here::here("script_asequibilidad/", "322-resultados-segunda-individuos.R"))
source(here::here("script_asequibilidad/", "322-resultados-segunda-individuos.R"))
################################
## 23-tablas-cruzadas.R       ##
################################
source(here::here("script_asequibilidad/", "22-proporcion-gasto.R"))
