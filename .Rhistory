library(here)
library(here)
library(readxl)
library(tidyverse)
library(knitr)
library(moments)
library(maditr)
library(mice)
library(VIM)
library(dplyr)
library(finalfit)
file.choose()
##############################
## 10-cargar-bases-de-datos ##
##############################
setwd("/Users/sergiobarona03/Desktop/multiple_imputation_geih/datos_geih")
Ocupados = read.csv("datos_geih/Ocupados.CSV", sep = ";")
##############################
## 10-cargar-bases-de-datos ##
##############################
setwd("/Users/sergiobarona03/Desktop/multiple_imputation_geih/datos_geih")
##############################
## 10-cargar-bases-de-datos ##
##############################
setwd("/Users/sergiobarona03/Desktop/multiple_imputation_geih")
Ocupados = read.csv("datos_geih/Ocupados.CSV", sep = ";")
Datos_del_hogar_y_la_vivienda = read.csv("datos_geih/Datos del hogar y la vivienda.CSV", sep = ";")
No_ocupados = read.csv("datos_geih/No ocupados.CSV", sep = ";")
Otros_ingresos_e_impuestos = read.csv("datos_geih/Otros ingresos e impuestos.CSV", sep = ";")
Caracteristicas_generales <- read.csv("datos_geih/Características generales, seguridad social en salud y educación.CSV", sep = ";")
setwd("/Users/sergiobarona03/Desktop/multiple_imputation_geih")
##############################
## 10-cargar-bases-de-datos ##
##############################
source(here::here("script_asequibilidad/", "00-cargar-librerias.R"))
saveRDS(dataset_imputar, here("resultados_generales/dataset_imputar.RDS"))
OcupadosF <- filter(Ocupados,AREA == 76)
Datos_del_hogar_y_la_viviendaF <- filter(Datos_del_hogar_y_la_vivienda,AREA == 76)
No_ocupadosF <- filter(No_ocupados,AREA == 76)
Otros_ingresos_e_impuestosF <- filter(Otros_ingresos_e_impuestos,AREA == 76)
Caracteristicas_generalesF <- filter(Caracteristicas_generales,AREA == 76)
# seleccionar variables de interés
ocup <- OcupadosF[c("DIRECTORIO","SECUENCIA_P","ORDEN","P6800", "INGLABO")]
Datos_vivi <- Datos_del_hogar_y_la_viviendaF[c("DIRECTORIO","SECUENCIA_P","P4030S1A1","P6008")]
Noocup <- No_ocupadosF[c("DIRECTORIO","SECUENCIA_P","ORDEN","P7422S1")]
Ot_ing <- Otros_ingresos_e_impuestosF[c("DIRECTORIO","SECUENCIA_P","ORDEN","P7500S1A1","P7500S2A1","P7500S3A1")]
Car_gen <- Caracteristicas_generalesF[c("DIRECTORIO","SECUENCIA_P","ORDEN","P3271","P6050","P6040", "P3042")]
# selección de base de datos para imputar
dataset_imputar = merge(ocup, Car_gen, all.x = TRUE)
dataset_imputar = dataset_imputar[c("DIRECTORIO", "SECUENCIA_P", "ORDEN", "INGLABO", "P6040", "P3271", "P3042", "P6800")]
dataset_imputar$id = paste0(dataset_imputar$DIRECTORIO,"-",dataset_imputar$SECUENCIA_P,"-",dataset_imputar$ORDEN)
dataset_imputar = dataset_imputar[c("id","INGLABO", "P6040", "P3271", "P3042", "P6800")]
colnames(dataset_imputar) = c("id_hogar", "ing", "edad", "sexo", "estudio", "horas")
dataset_imputar$edad_sqr = dataset_imputar$edad*dataset_imputar$edad
saveRDS(dataset_imputar, here("resultados_generales/dataset_imputar.RDS"))
dataset_imputar$id_hogar = as.character(dataset_imputar$id_hogar)
dataset_imputar$ing = as.numeric(dataset_imputar$ing)
dataset_imputar$edad = as.numeric(dataset_imputar$edad)
dataset_imputar$sexo = as.factor(dataset_imputar$sexo)
dataset_imputar$estudio = as.factor(dataset_imputar$estudio)
dataset_imputar$horas = as.numeric(dataset_imputar$horas)
#################################
## Análisis de datos faltantes ##
#################################
dataset_imputar_pr = dataset_imputar
colnames(dataset_imputar_pr) = c("ID", "Ingresos corrientes", "Edad", "Sexo",
"Escolaridad", "Horas trabajadas", "Edad2")
explanatory <- c("Edad", "Sexo",
"Escolaridad",
"Horas trabajadas", "Edad2")
dependent <- "Ingresos corrientes"
dataset_imputar_pr %>%
missing_pattern(dependent, explanatory)
plot_bna = dataset_imputar_pr %>%
missing_pattern(dependent, explanatory)
plot_na = dataset_imputar_pr %>%
missing_pattern(dependent, explanatory)
plot_na
plot_na = dataset_imputar_pr %>% missing_pattern(dependent, explanatory)
imputed_ocupados = mice(dataset_imputar, m=5, maxit = 50, method = 'pmm')
imputed_ocupados = mice(dataset_imputar, m=5, maxit = 50, method = 'pmm')
lista_datasets = list()
length(lista_datasets) = 5
lista_datasets[[1]] = complete(imputed_ocupados,1)
lista_datasets[[2]] = complete(imputed_ocupados,2)
lista_datasets[[3]] = complete(imputed_ocupados,3)
lista_datasets[[4]] = complete(imputed_ocupados,4)
lista_datasets[[5]] = complete(imputed_ocupados,5)
######################################
## 22-proporcion-gasto.R ##
######################################
source(here::here("script_asequibilidad/", "21-proporcion-gasto.R"))
######################################
## 22-proporcion-gasto.R ##
######################################
source(here::here("script_asequibilidad/", "22-proporcion-gasto.R"))
######################################
## 21-ingresos-corrientes-hogares.R ##
######################################
source(here::here("script_asequibilidad/", "20-multiple-imputation.R"))
# merge completo
OCUP_Noocup <- merge(ocup,Noocup, by = c("DIRECTORIO", "SECUENCIA_P","ORDEN"), all = TRUE)
OCUP_Noocup_OT_ING<- merge(OCUP_Noocup,Ot_ing, by = c("DIRECTORIO", "SECUENCIA_P","ORDEN"), all = TRUE)
OCUP_Noocup_OT_ING_CAR_GEN <- merge(OCUP_Noocup_OT_ING,Car_gen, by = c("DIRECTORIO", "SECUENCIA_P","ORDEN"), all = TRUE)
dataset <-merge(OCUP_Noocup_OT_ING_CAR_GEN,Datos_vivi, by = c("DIRECTORIO", "SECUENCIA_P"))
# calcular de ingresos corrientes totales por persona
dataset <- mutate(dataset, Ingresos = rowSums(dataset[ , c("INGLABO","P7422S1","P7500S1A1","P7500S2A1","P7500S3A1")], na.rm=TRUE))
# construccion de una variable de identificación para los hogares
dataset$id = paste0(dataset$DIRECTORIO,"-",dataset$SECUENCIA_P)
# construccion de base de datos de recepción vacía
dataset_2 = data.frame(levels(as.factor(dataset$id)))
colnames(dataset_2) = "id"
dataset_2$ingresos = NA
hogares_id = levels(as.factor(dataset_2$id))
# bucle para el cálculo de los ingresos para los hogares
for (k in 1:length(hogares_id)) {
df = data.frame()
df = dataset %>% filter(id %in% hogares_id[k])
dataset_2[which(dataset_2$id == hogares_id[k]), 2] = sum(df$Ingresos)
}
# incluir la variable de tamaño de los hogares
dataset_2 = merge(dataset_2, dataset[c("id", "P6008")], by ="id")
dataset_2 = dataset_2[!duplicated(dataset_2),]
# recodificar los ingresos corrientes de los hogares según deciles
deciles = quantile(dataset_2$ingresos, probs = seq(.1, .9, by = .1))
dataset_2 = dataset_2 %>% mutate(deciles = cut(ingresos, c(0, deciles, Inf), c("decil 1", "decil 2", "decil 3", "decil 4", "decil 5",
"decil 6", "decil 7", "decil 8", "decil 9", "decil 10")))
# trabajar con la base de datos sin valores NA (vease el analisis de imputacion)
dataset_2_na = dataset_2[!is.na(dataset_2$deciles),]
View(dataset_na)
View(dataset_2_na)
deciles_gasto = data.frame(levels(as.factor(dataset_2_na$deciles)))
View(deciles_gasto)
colnames(deciles_gasto) = "deciles"
deciles_gasto$share = c(0.60, 0.6, 0.5, 0.5, 0.5, 0.4, 0.4, 0.3, 0.2, 0.2)
deciles_gasto$share = c(0.60, 0.6, 0.5, 0.5, 0.5, 0.4, 0.4, 0.4, 0.2, 0.2)
dataset_2_na = merge(dataset_2_na, deciles_gasto, by = "deciles")
dataset_2_na = merge(dataset_2_na, deciles_gasto, by = "deciles", all.x = TRUE)
# trabajar con la base de datos sin valores NA (vease el analisis de imputacion)
dataset_2_na = dataset_2[!is.na(dataset_2$deciles),]
dataset_2_na = merge(dataset_2_na, deciles_gasto, by = "deciles", all.x = TRUE)
View(dataset_2_na)
# trabajar con la base de datos sin valores NA (vease el analisis de imputacion)
dataset_2_na = dataset_2[!is.na(dataset_2$deciles),]
###################################################
## Determinar el ingreso dedicado a alimentacion ##
###################################################
dataset_2_na$id = c(1:nrow(dataset_2_na))
# trabajar con la base de datos sin valores NA (vease el analisis de imputacion)
dataset_2_na = dataset_2[!is.na(dataset_2$deciles),]
###################################################
## Determinar el ingreso dedicado a alimentacion ##
###################################################
dataset_2_na$id_aux = c(1:nrow(dataset_2_na))
dataset_2_na = merge(dataset_2_na, deciles_gasto, by = "deciles", all.x = TRUE)
dataset_2_na = dataset_2_na[dataset_2_na$id_aux,]
dataset_2_na = dataset_2_na[order(dataset_2_na$id_aux),]
dataset_2_na = dataset_2_na[setdiff(dataset_2_na, "id_aux")]
dataset_2_na = dataset_2_na[setdiff(colnames(dataset_2_na), "id_aux")]
dataset_2_na
# calcular ingreso dedicado a alimentacion
dataset_2_na$ingreso_alimentos = (1 + dataset_2_na$share)*dataset_2_na$ingresos
# calcular ingreso dedicado a alimentacion
dataset_2_na$ingreso_alimentos = dataset_2_na$share*dataset_2_na$ingresos
source("~/Desktop/multiple_imputation_geih/script_asequibilidad/30-asequibilidad-dietas.R", echo=TRUE)
Hogar = c(1:8)
getwd()
tipo_hogares = read_xls("srcipt_asequibilidad/tipo_hogares.xlsx")
tipo_hogares = read_xls("srcipt_asequibilidad/tipo_hogares.xls")
tipo_hogares = read_excel("script_asequibilidad/tipo_hogares.xlsx")
View(tipo_hogares)
colnames(tipo_hogares)
kable(tipo_hogares, caption = "Tabla 10: Composición de los tipos de hogares considerados", col.names = c("Hogar", "Miembro", "Sexo", "Grupo de edad"))
deciles_gasto_table = deciles_gasto
deciles_gasto_table$share = deciles_gasto_table$share*100
deciles
deciles
deciles_gasto$ingreso_corriente = as.numeric(deciles)
quantile(dataset_2_na$ingreso_alimentos, probs = seq(0.1,1,by = 0.1))
quantile(dataset_2_na$ingresos, probs = seq(0.1,1,by = 0.1))
quantile(dataset_2$ingresos, probs = seq(0.1,1,by = 0.1))
deciles_gasto$gasto_alimentacion = deciles_gasto$ingresos_corrientes*deciles_gasto$share
View(deciles_gasto)
deciles_gasto$ingresos_corrientes = quantile(dataset_2$ingresos, probs = seq(0.1,1,by = 0.1))
deciles_gasto$gasto_alimentacion = deciles_gasto$ingresos_corrientes*deciles_gasto$share
deciles_gasto_table = deciles_gasto
deciles_gasto_table$share = deciles_gasto_table$share*100
colnames(deciles_gasto_table)
deciles_gasto_table = deciles_gasto
deciles_gasto_table$share = deciles_gasto_table$share*100
kable(deciles_gasto, caption = "Tabla 11: gasto total en alimentación diferenciado por deciles para los hogares. Fuente: GEIH, 2022; ENPH, 2017", col.names = c("Decil", "Proporción (%)", "Ingresos corrientes", "Gasto en alimentación"))
deciles_gasto_table$share = deciles_gasto_table$share*100
kable(deciles_gasto_table, caption = "Tabla 11: gasto total en alimentación diferenciado por deciles para los hogares. Fuente: GEIH, 2022; ENPH, 2017", col.names = c("Decil", "Proporción (%)", "Ingresos corrientes", "Gasto en alimentación"))
deciles_gasto_table = deciles_gasto
deciles_gasto_table$share = deciles_gasto_table$share*100
kable(deciles_gasto_table, caption = "Tabla 11: gasto total en alimentación diferenciado por deciles para los hogares. Fuente: GEIH, 2022; ENPH, 2017", col.names = c("Decil", "Proporción (%)", "Ingresos corrientes", "Gasto en alimentación"))
file.choose()
# dieta de subsistencia
read_excel("script_asequibilidad/costo_dietas/costo_dieta_subsistencia.xlsx")
dieta_2 = read_excel("script_asequibilidad/costo_dietas/costo_dieta_nutritiva.xlsx")
# dieta recomendada
dieta_3 = read_excel("script_asequibilidad/costo_dietas/costo_dieta_saludable.xlsx")
colnames(dieta_1)
colnames(dieta_2)
# dieta de subsistencia
dieta_1 = read_excel("script_asequibilidad/costo_dietas/costo_dieta_subsistencia.xlsx")
dieta_1_unmelt = dieta_1[c("grupo_demo", "sexo", "costo_dia")]
dieta_1_unmelt = dcast(dieta_1)
dieta_1_unmelt = dieta_1[c("grupo_demo", "sexo", "costo_dia")]
dieta_1_unmelt = dcast(dieta_1)
dieta_1_unmelt = dcast(dieta_1, formula = grupo_demo~sexo, fun.aggregate = sum, value.var = "costo_dia")
dieta_1_unmelt = dieta_1[c("grupo_demo", "sexo", "costo_dia")]
dieta_1_unmelt = dcast(dieta_1, formula = grupo_demo~sexo, fun.aggregate = sum, value.var = "costo_dia")
kable(dieta_1_unmelt, caption = "Tabla 12: costo mínimo estimado de un dieta de subsistencia para cada grupo demográfico. Fuente: Documento de trabajo 1.")
dieta_1_unmelt = dieta_1[c("grupo_demo", "sexo", "costo_dia")]
dieta_1_unmelt = dcast(dieta_1, formula = sexo~grupo_demo, fun.aggregate = sum, value.var = "costo_dia")
kable(dieta_1_unmelt, caption = "Tabla 12: costo mínimo estimado de un dieta de subsistencia para cada grupo demográfico. Fuente: Documento de trabajo 1.")
dieta_1_unmelt = dcast(dieta_1, formula = grupo_demo~sexo, fun.aggregate = sum, value.var = "costo_dia")
kable(dieta_1_unmelt, caption = "Tabla 12: costo mínimo estimado de un dieta de subsistencia para cada grupo demográfico. Fuente: Documento de trabajo 1.")
dieta_2_unmelt = dieta_2[c("grupo_demo", "sexo", "costo_dia")]
dieta_2_unmelt = dcast(dieta_2, formula = grupo_demo~sexo, fun.aggregate = sum, value.var = "costo_dia")
dieta_2_unmelt
dieta_3_unmelt = dieta_3[c("grupo_demo", "sexo", "costo_dia")]
kable(dieta_1_unmelt, caption = "Tabla 18: costo mínimo estimado de un dieta saludable o recomendada para cada grupo demográfico. Fuente: Documento de trabajo 1.", col.names = c("Grupo demográfico", "Masculino", "Femenino"))
dieta_3_unmelt = dieta_3[c("grupo_demo", "sexo", "costo_dia")]
dieta_3_unmelt = dcast(dieta_3, formula = grupo_demo~sexo, fun.aggregate = sum, value.var = "costo_dia")
kable(dieta_3_unmelt, caption = "Tabla 18: costo mínimo estimado de un dieta saludable o recomendada para cada grupo demográfico. Fuente: Documento de trabajo 1.", col.names = c("Grupo demográfico", "Masculino", "Femenino"))
tipo_hogares
tipo_hogares$id = c(1:nrow(tipo_hogares))
colnames(dieta_1)
colnames(tipo_hogares) = c("hogar", "persona", "sexo", "grupo_demo")
tipo_hogares_dieta_1 = merge(tipo_hogares, dieta_1,
by = c("grupo_demo", "sexo"),
all.x = TRUE, all.y = FALSE)
View(tipo_hogares_dieta_1)
tipo_hogares_dieta_1 = tipo_hogares_dieta_1[order(tipo_hogares_dieta_1$id),]
tipo_hogares$id = c(1:nrow(tipo_hogares))
tipo_hogares_dieta_1 = merge(tipo_hogares, dieta_1[c("grupo_demo", "sexo", "costo_dia")],
by = c("grupo_demo", "sexo"),
all.x = TRUE, all.y = FALSE)
tipo_hogares = read_excel("script_asequibilidad/tipo_hogares.xlsx")
colnames(tipo_hogares) = c("hogar", "persona", "sexo", "grupo_demo")
tipo_hogares$id = c(1:nrow(tipo_hogares))
tipo_hogares_dieta_1 = merge(tipo_hogares, dieta_1[c("grupo_demo", "sexo", "costo_dia")],
by = c("grupo_demo", "sexo"),
all.x = TRUE, all.y = FALSE)
tipo_hogares_dieta_1 = tipo_hogares_dieta_1[order(tipo_hogares_dieta_1$id),]
colnames(tipo_hogares_dieta_1)
tipo_hogares_dieta_1 = tipo_hogares_dieta_1[c("hogar", "persona", "sexo", "costo_dia")]
# calcular el costo para el tipo de hogar
dieta_1_hogar = as.data.frame(matrix(1:9))
dieta_1_hogar
colnames(dieta_1_hogar) = "hogar"
k = 1
df = data.frame()
df = tipo_hogares_dieta_1 %>% filter(hogar %in% k)
df
for (k in 1:9) {
df = data.frame()
df = tipo_hogares_dieta_1 %>% filter(hogar %in% k)
dieta_1_hogar[which(dieta_1_hogar$hogar == k),2] = sum(df$costo_dia)
}
dieta_1_hogar
colnames(dieta_1_hogar) = c("Tipo de hogar", "Costo diario estimado ($)")
# calcular el costo para cada miembro
tipo_hogares_dieta_2 = merge(tipo_hogares, dieta_2[c("grupo_demo", "sexo", "costo_dia")],
by = c("grupo_demo", "sexo"),
all.x = TRUE, all.y = FALSE)
# calcular el costo para cada miembro
tipo_hogares_dieta_2 = merge(tipo_hogares, dieta_2[c("grupo_demo", "sexo", "costo_dia")],
by = c("grupo_demo", "sexo"),
all.x = TRUE, all.y = FALSE)
tipo_hogares_dieta_2 = tipo_hogares_dieta_2[order(tipo_hogares_dieta_2$id),]
tipo_hogares_dieta_2 = tipo_hogares_dieta_2[c("hogar", "persona", "sexo", "costo_dia")]
# calcular el costo para el tipo de hogar
dieta_2_hogar = as.data.frame(matrix(1:9))
colnames(dieta_2_hogar) = "hogar"
for (k in 1:9) {
df = data.frame()
df = tipo_hogares_dieta_2 %>% filter(hogar %in% k)
dieta_1_hogar[which(dieta_1_hogar$hogar == k),2] = sum(df$costo_dia)
}
# calcular el costo para cada miembro
tipo_hogares_dieta_2 = merge(tipo_hogares, dieta_2[c("grupo_demo", "sexo", "costo_dia")],
by = c("grupo_demo", "sexo"),
all.x = TRUE, all.y = FALSE)
tipo_hogares_dieta_2 = tipo_hogares_dieta_2[order(tipo_hogares_dieta_2$id),]
tipo_hogares_dieta_2 = tipo_hogares_dieta_2[c("hogar", "persona", "sexo", "costo_dia")]
# calcular el costo para el tipo de hogar
dieta_2_hogar = as.data.frame(matrix(1:9))
colnames(dieta_2_hogar) = "hogar"
for (k in 1:9) {
df = data.frame()
df = tipo_hogares_dieta_2 %>% filter(hogar %in% k)
dieta_2_hogar[which(dieta_2_hogar$hogar == k),2] = sum(df$costo_dia)
}
colnames(dieta_2_hogar) = c("Tipo de hogar", "Costo diario estimado ($)")
dieta_2_hogar
# calcular el costo para cada miembro
tipo_hogares_dieta_3 = merge(tipo_hogares, dieta_3[c("grupo_demo", "sexo", "costo_dia")],
by = c("grupo_demo", "sexo"),
all.x = TRUE, all.y = FALSE)
kable(dieta_1_hogar, caption = "Tabla 12: costo mínimo estimado de un dieta de subsistencia para cada tipo de hogar. Fuente: Documento de trabajo 1.", col.names = c("Grupo demográfico", "Masculino", "Femenino"))
kable(dieta_1_hogar, caption = "Tabla 12: costo mínimo estimado de un dieta de subsistencia para cada tipo de hogar. Fuente: Documento de trabajo 1.")
# cargar base de datos para imputar
setwd("/Users/sergiobarona03/Desktop/multiple_imputation_geih")
source(here::here("script_asequibilidad/", "31-primera-aprox.R"))
View(dataset_2)
colnames(datset_2)
colnames(dataset_2)
View(tipo_hogares)
colnames(tipo_hogares)
