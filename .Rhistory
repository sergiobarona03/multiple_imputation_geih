Otros_ingresos_e_impuestos = read.csv("datos_geih/Otros ingresos e impuestos.CSV")
Caracteristicas_generales <- read.csv("datos_geih/Características generales, seguridad social en salud y educación.CSV")
# filtro para Cali, Valle del Cauca (código 76)
OcupadosF <- filter(Ocupados,AREA == 76)
Datos_del_hogar_y_la_viviendaF <- filter(Datos_del_hogar_y_la_vivienda,AREA == 76)
# cargar las bases de datos
setwd("C:/Users/lea8/Desktop/multiple_imputation_geih")
Ocupados = read.csv("datos_geih/Ocupados.CSV", sep = ";")
Datos_del_hogar_y_la_vivienda = read.csv("datos_geih/Datos del hogar y la vivienda.CSV")
No_ocupados = read.csv("datos_geih/No ocupados.CSV")
Otros_ingresos_e_impuestos = read.csv("datos_geih/Otros ingresos e impuestos.CSV")
Caracteristicas_generales <- read.csv("datos_geih/Características generales, seguridad social en salud y educación.CSV")
# cargar las bases de datos
setwd("C:/Users/lea8/Desktop/multiple_imputation_geih")
Ocupados = read.csv("datos_geih/Ocupados.CSV", sep = ";")
Datos_del_hogar_y_la_vivienda = read.csv("datos_geih/Datos del hogar y la vivienda.CSV", sep = ";")
No_ocupados = read.csv("datos_geih/No ocupados.CSV", sep = ";")
Otros_ingresos_e_impuestos = read.csv("datos_geih/Otros ingresos e impuestos.CSV", sep = ";")
Caracteristicas_generales <- read.csv("datos_geih/Características generales, seguridad social en salud y educación.CSV", sep = ";")
# filtro para Cali, Valle del Cauca (código 76)
OcupadosF <- filter(Ocupados,AREA == 76)
Datos_del_hogar_y_la_viviendaF <- filter(Datos_del_hogar_y_la_vivienda,AREA == 76)
No_ocupadosF <- filter(No_ocupados,AREA == 76)
Otros_ingresos_e_impuestosF <- filter(Otros_ingresos_e_impuestos,AREA == 76)
Caracteristicas_generalesF <- filter(Caracteristicas_generales,AREA == 76)
# seleccionar variables de interés
ocup <- select(OcupadosF,"DIRECTORIO","SECUENCIA_P","ORDEN","INGLABO")
Datos_vivi <- select(Datos_del_hogar_y_la_viviendaF,"DIRECTORIO","SECUENCIA_P","P4030S1A1","P6008")
Noocup <- select(No_ocupadosF,"DIRECTORIO","SECUENCIA_P","ORDEN","P7422S1")
Ot_ing <- select(Otros_ingresos_e_impuestosF,"DIRECTORIO","SECUENCIA_P","ORDEN","P7500S1A1","P7500S2A1","P7500S3A1")
Car_gen <- select(Caracteristicas_generalesF,"DIRECTORIO","SECUENCIA_P","ORDEN","P3271","P6050","P6040")
# merge completo
OCUP_Noocup <- merge(ocup,Noocup, by = c("DIRECTORIO", "SECUENCIA_P","ORDEN"), all = TRUE)
OCUP_Noocup_OT_ING<- merge(OCUP_Noocup,Ot_ing, by = c("DIRECTORIO", "SECUENCIA_P","ORDEN"), all = TRUE)
OCUP_Noocup_OT_ING_CAR_GEN <- merge(OCUP_Noocup_OT_ING,Car_gen, by = c("DIRECTORIO", "SECUENCIA_P","ORDEN"), all = TRUE)
Basefinal <-merge(OCUP_Noocup_OT_ING_CAR_GEN,Datos_vivi, by = c("DIRECTORIO", "SECUENCIA_P"))
dataset_final <-merge(OCUP_Noocup_OT_ING_CAR_GEN,Datos_vivi, by = c("DIRECTORIO", "SECUENCIA_P"))
dataset <-merge(OCUP_Noocup_OT_ING_CAR_GEN,Datos_vivi, by = c("DIRECTORIO", "SECUENCIA_P"))
View(dataset)
# merge completo
OCUP_Noocup <- merge(ocup,Noocup, by = c("DIRECTORIO", "SECUENCIA_P","ORDEN"), all = TRUE)
OCUP_Noocup_OT_ING<- merge(OCUP_Noocup,Ot_ing, by = c("DIRECTORIO", "SECUENCIA_P","ORDEN"), all = TRUE)
OCUP_Noocup_OT_ING_CAR_GEN <- merge(OCUP_Noocup_OT_ING,Car_gen, by = c("DIRECTORIO", "SECUENCIA_P","ORDEN"), all = TRUE)
dataset <-merge(OCUP_Noocup_OT_ING_CAR_GEN,Datos_vivi, by = c("DIRECTORIO", "SECUENCIA_P"))
# cálculo de ingresos corrientes totales por persona
dataset <- mutate(dataset, Ingresos = rowSums(Basefinal[ , c("INGLABO","P7422S1","P7500S1A1","P7500S2A1","P7500S3A1")], na.rm=TRUE))
View(dataset)
# construcción de los ingresos diferenciados por hogares
deciles = quantile(dataset$Ingresos, probs = seq(0.1,0.9, by = 0.1))
dataset_2 = data.frame(levels(as.factor(dataset$id)))
colnames(base_final_2) = "id_hogar"
base_final_2$ingresos = NA
dataset_2 = data.frame(levels(as.factor(dataset$id)))
colnames(dataset_2) = "id_hogar"
dataset_2$ingresos = NA
dataset_2 = data.frame(levels(as.factor(dataset$id)))
colnames(dataset_2) = "id_hogar"
dataset_2$ingresos = NA
View(dataset_2)
dataset_2 = data.frame(levels(as.factor(dataset$id)))
View(dataset)
dataset$id = paste0(dataset$DIRECTORIO,"-",dataset$SECUENCIA_P)
dataset_2 = data.frame(levels(as.factor(dataset$id)))
colnames(dataset_2) = "id_hogar"
dataset_2$ingresos = NA
hogares_id = levels(as.factor(dataset_2$id))
hogares_id
k = 1
df = data.frame()
df = Basefinal1 %>% filter(id %in% hogares_id[k])
base_final_2[which(base_final_2$id_hogar == hogares_id[k]), 2] = sum(df$df.Ingresos)
k = 1
df = data.frame()
df = dataset %>% filter(id %in% hogares_id[k])
df
dataset_2[which(dataset_2$id_hogar == hogares_id[k]), 2] = sum(df$Ingresos)
options(scipen=999)
View(dataset_3)
View(dataset_2)
for (k in 1:length(hogares_id)) {
df = data.frame()
df = dataset %>% filter(id %in% hogares_id[k])
dataset_2[which(dataset_2$id_hogar == hogares_id[k]), 2] = sum(df$Ingresos)
}
min(dataset_2$ingresos)
max(dataset_2$ingresos)
colnames(dataset_2)
#construcción de base de datos de recepción vacía
dataset_2 = data.frame(levels(as.factor(dataset$id)))
colnames(dataset_2) = "id"
dataset_2$ingresos = NA
hogares_id = levels(as.factor(dataset_2$id))
# bucle para el cálculo de los ingresos para los hogares
for (k in 1:length(hogares_id)) {
df = data.frame()
df = dataset %>% filter(id %in% hogares_id[k])
dataset_2[which(dataset_2$id_hogar == hogares_id[k]), 2] = sum(df$Ingresos)
}
#construcción de base de datos de recepción vacía
dataset_2 = data.frame(levels(as.factor(dataset$id)))
colnames(dataset_2) = "id"
dataset_2$ingresos = NA
hogares_id = levels(as.factor(dataset_2$id))
# bucle para el cálculo de los ingresos para los hogares
for (k in 1:length(hogares_id)) {
df = data.frame()
df = dataset %>% filter(id %in% hogares_id[k])
dataset_2[which(dataset_2$id == hogares_id[k]), 2] = sum(df$Ingresos)
}
# incluir la variable de tamaño de los hogares
dataset_2 = merge(dataset_2, dataset, by ="id")
View(dataset_2)
colnames(dataset_2)
#construcción de base de datos de recepción vacía
dataset_2 = data.frame(levels(as.factor(dataset$id)))
colnames(dataset_2) = "id"
dataset_2$ingresos = NA
#construcción de una variable de identificación para los hogares
dataset$id = paste0(dataset$DIRECTORIO,"-",dataset$SECUENCIA_P)
#construcción de base de datos de recepción vacía
dataset_2 = data.frame(levels(as.factor(dataset$id)))
colnames(dataset_2) = "id"
dataset_2$ingresos = NA
hogares_id = levels(as.factor(dataset_2$id))
# bucle para el cálculo de los ingresos para los hogares
for (k in 1:length(hogares_id)) {
df = data.frame()
df = dataset %>% filter(id %in% hogares_id[k])
dataset_2[which(dataset_2$id == hogares_id[k]), 2] = sum(df$Ingresos)
}
# incluir la variable de tamaño de los hogares
dataset_2 = merge(dataset_2, dataset[c("id", "P6008")], by ="id")
View(dataset_2)
#construcción de una variable de identificación para los hogares
dataset$id = paste0(dataset$DIRECTORIO,"-",dataset$SECUENCIA_P)
#construcción de base de datos de recepción vacía
dataset_2 = data.frame(levels(as.factor(dataset$id)))
colnames(dataset_2) = "id"
dataset_2$ingresos = NA
hogares_id = levels(as.factor(dataset_2$id))
# bucle para el cálculo de los ingresos para los hogares
for (k in 1:length(hogares_id)) {
df = data.frame()
df = dataset %>% filter(id %in% hogares_id[k])
dataset_2[which(dataset_2$id == hogares_id[k]), 2] = sum(df$Ingresos)
}
# incluir la variable de tamaño de los hogares
dataset_2 = merge(dataset_2, dataset[c("id", "P6008")], by ="id", all.x = TRUE, all.y = FALSE)
dataset_2 = dataset_2[!duplicated(dataset_2),]
#construcción de una variable de identificación para los hogares
dataset$id = paste0(dataset$DIRECTORIO,"-",dataset$SECUENCIA_P)
#construcción de base de datos de recepción vacía
dataset_2 = data.frame(levels(as.factor(dataset$id)))
colnames(dataset_2) = "id"
dataset_2$ingresos = NA
hogares_id = levels(as.factor(dataset_2$id))
# bucle para el cálculo de los ingresos para los hogares
for (k in 1:length(hogares_id)) {
df = data.frame()
df = dataset %>% filter(id %in% hogares_id[k])
dataset_2[which(dataset_2$id == hogares_id[k]), 2] = sum(df$Ingresos)
}
# incluir la variable de tamaño de los hogares
dataset_2 = merge(dataset_2, dataset[c("id", "P6008")], by ="id")
dataset_2 = dataset_2[!duplicated(dataset_2),]
library(knitr)
# presentación de la tabla
knitr::kable(dataset_2, caption = "Ingresos corrientes y tamaño de los hogares de Cali, Valle del Cauca (septiembre/2022). Fuente: GEIH (2022).",
col.names = c("Id Hogar", "Ingreso corriente", "Tamaño del hogar"))
# presentación de la tabla
knitr::kable(dataset_2[1:10], caption = "Ingresos corrientes y tamaño de los hogares de Cali, Valle del Cauca (septiembre/2022). Fuente: GEIH (2022).",
col.names = c("Id Hogar", "Ingreso corriente", "Tamaño del hogar"))
# presentación de la tabla
knitr::kable(dataset_2[1:10,], caption = "Ingresos corrientes y tamaño de los hogares de Cali, Valle del Cauca (septiembre/2022). Fuente: GEIH (2022).",
col.names = c("Id Hogar", "Ingreso corriente", "Tamaño del hogar"))
# presentación de la tabla
knitr::kable(dataset_2[1:10,], caption = "Ingresos corrientes y tamaño de los hogares de Cali, Valle del Cauca (septiembre/2022). Fuente: GEIH.",
col.names = c("Id Hogar", "Ingreso corriente", "Tamaño del hogar"))
# presentación de la tabla
knitr::kable(dataset_2[1:10,], caption = "Ingresos corrientes y tamaño de los hogares de Cali, Valle del Cauca (septiembre/2022). Fuente: GEIH.",
col.names = c("id Hogar", "Ingreso corriente", "Tamaño del hogar"))
# presentación de la tabla
knitr::kable(dataset_2[1:10,], caption = "Ingresos corrientes y tamaño de los hogares de Cali, Valle del Cauca (septiembre/2022). Fuente: GEIH.",
col.names = c("ID Hogar", "Ingreso corriente", "Tamaño del hogar"))
library(moments)
install.packages("moments")
library(moments)
kurtosis(dataset_2$ingresos)
kurtosis_skewness = data.frame(kurtosis(dataset_2$ingresos), skewness(dataset_2$ingresos))
kurtosis_skewness
colnames(kurtosis_skewness) = c("Kurtosis", "Skewness")
knitr::kable(kurtosis_skewness)
# densidad empírica
# Basic density
ggplot(dataset_2, aes(x=ingresos)) +
geom_density()
# Add mean line
p+ geom_vline(aes(xintercept=mean(ingresos)),
color="blue", linetype="dashed", size=1)
# densidad empírica
# Basic density
ggplot(dataset_2, aes(x=ingresos)) +
geom_density() + geom_vline(aes(xintercept=mean(ingresos)),
color="blue", linetype="dashed", size=1)
plot(density(dataset_2$ingresos
))
help(plot)
# densidad empírica
plot(density(dataset_2$ingresos), xlab = "Ingresos por hogares", main = "")
# densidad empírica
plot(density(dataset_2$ingresos), xlab = "Ingresos corrientes por hogares", main = "")
summary(dataset_2$ingresos)
# presentación de los deciles y tamaño de los hogares
deciles = quantile(dataset_2$ingresos, probs = c(.1, .9, by = .1))
deciles
# presentación de los deciles y tamaño de los hogares
deciles = quantile(dataset_2$ingresos, probs = seq(.1, .9, by = .1))
deciles
dataset_2 = dataset_2 %>% mutate(decil = cut(ingresos, c(0, deciles, Inf)))
View(dataset_2)
deciles
levels(as.factor(dataset_2$decil))
dataset_2 = dataset_2 %>% mutate(decil = cut(ingresos, c(0, deciles, Inf)),
labels = c("decil 1", "decil 2", "decil 3", "decil 4", "decil 5",
"decil 6", "decil 7", "decil 8", "decil 9", "decil 10"))
dataset_2 = dataset_2 %>% mutate(decil = cut(ingresos, c(0, deciles, Inf)), c("decil 1", "decil 2", "decil 3", "decil 4", "decil 5",
"decil 6", "decil 7", "decil 8", "decil 9", "decil 10"))
dataset_2 = dataset_2 %>% mutate(decil = cut(ingresos, c(0, deciles, Inf)), c("decil 1", "decil 2", "decil 3", "decil 4", "decil 5",
"decil 6", "decil 7", "decil 8", "decil 9", "decil 10"))
# presentación de los deciles y tamaño de los hogares
deciles = quantile(dataset_2$ingresos, probs = seq(.1, .9, by = .1))
dataset_2 = dataset_2 %>% mutate(decil = cut(ingresos, c(0, deciles, Inf)), c("decil 1", "decil 2", "decil 3", "decil 4", "decil 5",
"decil 6", "decil 7", "decil 8", "decil 9", "decil 10"))
length(c("decil 1", "decil 2", "decil 3", "decil 4", "decil 5",
"decil 6", "decil 7", "decil 8", "decil 9", "decil 10"))
length(levels(as.factor(dataset_2$decil)))
dataset_2 = dataset_2 %>% mutate(deciles = cut(ingresos, c(0, deciles, Inf), c("decil 1", "decil 2", "decil 3", "decil 4", "decil 5",
"decil 6", "decil 7", "decil 8", "decil 9", "decil 10")))
summary(dataset_2)
# valores NA y summary
na_values = dataset_2[is.na(dataset_2$deciles),]
na_values
length(na_values)
length(na_values$ingresos)
dataset_2_na = dataset_2[!is.na(dataset_2$deciles),]
#summary
summary = data.frame(min(dataset_2_na$ingresos), deciles, max(dataset_2_na$ingresos), mean(dataset_2_na$ingresos), median(dataset_2_na$ingresos))
summary
#summary
summary = data.frame(deciles, max(dataset_2_na$ingresos), mean(dataset_2_na$ingresos), median(dataset_2_na$ingresos))
#summary
summary = data.frame(c(deciles, max(dataset_2_na$ingresos), mean(dataset_2_na$ingresos), median(dataset_2_na$ingresos)))
summary
#summary
summary = data.frame(deciles, max(dataset_2_na$ingresos), mean(dataset_2_na$ingresos), median(dataset_2_na$ingresos))
summary
#summary
summary = data.frame(deciles, max(dataset_2_na$ingresos), mean(dataset_2_na$ingresos), median(dataset$ingresos))
#summary
summary = data.frame(deciles, max(dataset_2_na$ingresos), mean(dataset_2_na$ingresos), median(dataset_2$ingresos))
summary
#summary
summary = data.frame(deciles, max(dataset_2$ingresos), mean(dataset_2$ingresos), median(dataset_2$ingresos))
deciles
#summary
summary = data.frame(as.numeric(deciles), max(dataset_2$ingresos), mean(dataset_2$ingresos), median(dataset_2$ingresos))
summary
#summary
summary = as.data.frame(matrix(as.numeric(deciles), max(dataset_2$ingresos), mean(dataset_2$ingresos), median(dataset_2$ingresos), ncol = 1))
#summary
summary = as.data.frame(matrix(c(as.numeric(deciles), max(dataset_2$ingresos), mean(dataset_2$ingresos), median(dataset_2$ingresos), ncol = 1)))
summary
#summary
summary = as.data.frame(matrix(c(as.numeric(deciles), max(dataset_2$ingresos), mean(dataset_2$ingresos), median(dataset_2$ingresos)),ncol = 1))
summary
#summary
summary = as.data.frame(matrix(c(as.numeric(deciles), max(dataset_2$ingresos), mean(dataset_2$ingresos), median(dataset_2$ingresos)),nrow = 1))
summary
#summary
summary = as.data.frame(matrix(c(as.numeric(deciles), max(dataset_2$ingresos), mean(dataset_2$ingresos)),nrow = 1))
colnames(summary) = c("decil 1", "decil 2", "decil 3", "decil 4", "mediana", "decil 6", "decil 7", "decil 8", "decil 9", "Máx.", "Media")
summary
knitr::kable(summary, caption = "Ingresos corrientes para los hogares de Cali (septiembre/2022). Fuente: GEIH")
colnames(summary) = c("decil 1", "decil 2", "decil 3", "decil 4", "mediana", "decil 6", "decil 7", "decil 8", "decil 9", "Máx.", "Media")
colnames(summary) = c("decil 1", "decil 2", "decil 3", "decil 4", "mediana", "decil 6", "decil 7", "decil 8", "decil 9", "máx.", "Media")
knitr::kable(summary, caption = "Ingresos corrientes para los hogares de Cali (septiembre/2022). Fuente: GEIH")
# tabla: deciles de ingresos vs tamaño del hogar
table_1 = table(dataset_2_na$deciles, dataset_2_na$P6008)
View(table_1)
colnames(table_1) = c("Decil", "Tamaño del hogar", "Freq")
# tabla: deciles de ingresos vs tamaño del hogar
table_1 = as.data.frame(table(dataset_2_na$deciles, dataset_2_na$P6008))
colnames(table_1) = c("Decil", "Tamaño del hogar", "Freq")
dcast(data = table_1, id~Decil, value.var = "Freq")
library(maditr)
install.packages(‘maditr’)
install.packages("maditr")
library(maditr)
dcast(data = table_1, id~Decil, value.var = "Freq")
dcast(data = table_1, Tamaño del hogar~Decil, value.var = "Freq")
dcast(data = table_1, Tamaño del hogar ~Decil, value.var = "Freq")
dcast(data = table_1, Tamaño del hogar ~ Decil, value.var = "Freq")
dcast(data = table_1, Tamaño del hogar ~ Decil)
colnames(table_1) = c("Decil", "Tamaño_hogar", "Freq")
dcast(data = table_1, Tamaño_hogar ~ Decil)
table_1_unmelt = dcast(data = table_1, Tamaño_hogar ~ Decil)
table_1_unmelt = dcast(data = table_1, Tamaño_hogar ~ Decil, value.var = "Freq")
knitr::kable(table_1_unmelt)
View(table_1_unmelt)
table_1_unmelt$Total = rowSums(table_1_unmelt[2:ncol(table_1_unmelt)])
table_1_unmelt$Total = rowSums(table_1_unmelt[,2:ncol(table_1_unmelt)])
colSums(table_1_unmelt)
help("colSums")
cbind(x1 = 3, x2 = c(4:1, 2:5))
colsums(cbind(x1 = 3, x2 = c(4:1, 2:5)))
colSums(cbind(x1 = 3, x2 = c(4:1, 2:5)))
table_1[nrow(table_1)+1, ] = c("Total", colSums(table_1_unmelt[, 2:ncol(table_1_unmelt)]))
View(table_1)
table_1_unmelt[nrow(table_1_unmelt)+1, ] = c("Total", colSums(table_1_unmelt[, 2:ncol(table_1_unmelt)]))
table_1_unmelt[nrow(table_1_unmelt)+1, ]
c("Total", colSums(table_1_unmelt[, 2:ncol(table_1_unmelt)]))
table_1_unmelt[nrow(table_1_unmelt)+1, ] = c("Total", colSums(table_1_unmelt[, 2:ncol(table_1_unmelt)]))
table_1_unmelt[nrow(table_1_unmelt)+1, ] = c("Total", as.numeric(colSums(table_1_unmelt[, 2:ncol(table_1_unmelt)])))
table_1_unmelt[nrow(table_1_unmelt) + 1, ] = c("Total", as.numeric(colSums(table_1_unmelt[, 2:ncol(table_1_unmelt)])))
length( c("Total", as.numeric(colSums(table_1_unmelt[, 2:ncol(table_1_unmelt)]))))
c("Total", as.numeric(colSums(table_1_unmelt[, 2:ncol(table_1_unmelt)])))
table_1_unmelt[nrow(table_1_unmelt) + 1, ] = c(as.factor("Total"), as.numeric(colSums(table_1_unmelt[, 2:ncol(table_1_unmelt)])))
table_1_unmelt[nrow(table_1_unmelt) + 1, ] = c(as.factor("Total"), NA)
table_1_unmelt[nrow(table_1_unmelt) + 1, ] = c(as.factor("Total"), rep(NA, 11))
table_1_unmelt[nrow(table_1_unmelt) + 1, ] = rep(NA, 12)
table_1_unmelt[nrow(table_1_unmelt) + 1, ] = NA
VieW(table_1_unmelt)
View(table_1_unmelt)
table_1_unmelt[nrow(table_1_unmelt) + 1, ] = NA
total_2 = as.data.frame(matrix(c("Total", as.numeric(colSums(table_1_unmelt[2:nrow(table_1_unmelt)-1])))))
total_2 = as.data.frame(matrix(c("Total", as.numeric(colSums(table_1_unmelt[2:nrow(table_1_unmelt)-1])), 0)))
total_2 = as.data.frame(matrix(c("Total", as.numeric(colSums(table_1_unmelt[2:nrow(table_1_unmelt)-1])), 0), nrow = 1))
colSums(table_1_unmelt[2:nrow(table_1_unmelt)-1])
colSums(table_1_unmelt[2:(nrow(table_1_unmelt)-1)])
table_1_unmelt[2:(nrow(table_1_unmelt)-1)]
total_2 = as.data.frame(matrix(c("Total", as.numeric(colSums(table_1_unmelt[,2:nrow(table_1_unmelt)-1])), 0), nrow = 1))
table_1_unmelt[,2:nrow(table_1_unmelt)-1])
colSums(table_1_unmelt[,2:nrow(table_1_unmelt)-1])
colSums(table_1_unmelt[, 2:(nrow(table_1_unmelt)-1)])
total_2 = as.data.frame(matrix(c("Total", as.numeric(colSums(table_1_unmelt[, 2:(nrow(table_1_unmelt)-1]))), 0), nrow = 1))
total_2 = as.data.frame(matrix(c("Total", as.numeric(colSums(table_1_unmelt[, 2:(nrow(table_1_unmelt)-1)])), 0), nrow = 1))
total_2
total_2 = as.data.frame(matrix(c("Total", as.numeric(colSums(table_1_unmelt[, 2:(nrow(table_1_unmelt)-1)])), NA), nrow = 1))
total_2 = as.data.frame(matrix(c("Total", as.numeric(colSums(table_1_unmelt[, 2:nrow(table_1_unmelt)])),), nrow = 1))
)
total_2 = as.data.frame(matrix(c("Total", as.numeric(colSums(table_1_unmelt[, 2:(nrow(table_1_unmelt))]))), nrow = 1))
total_2
total_2 = as.data.frame(matrix(c("Total", as.numeric(colSums(table_1_unmelt[, 2:nrow(table_1_unmelt)]))), nrow = 1))
total_2
total_2 = as.data.frame(matrix(c("Total", as.numeric(colSums(table_1_unmelt[, 2:ncol(table_1_unmelt)]))), nrow = 1))
total_2
colnames(total_2) = colnames(table_1_unmelt)
table_1_unmelt
table_1_unmelt = rbind(table_1_unmelt, total_2)
View(table_1_unmelt)
deciles
knitr::kable(table_1_unmelt, caption = "Tamaño del hogar y deciles asociados a la distribución de los ingresos corrientes en los hogares de Cali (septiembre/2022). Fuente: GEIH")
knitr::kable(table_1_unmelt, caption = "Tamaño del hogar y deciles asociados a la distribución de los ingresos corrientes en los hogares de Cali (septiembre/2022). Fuente: GEIH", col.names = c("Tamaño del hogar", colnames(table_1_unmelt)[2:ncol(table_1_unmelt)]))
table_1_unmelt$Total/sum(table_1_unmelt$Total)
as.numeric(table_1_unmelt$Total)/as.numeric(sum(table_1_unmelt$Total))
as.numeric(table_1_unmelt$Total)
as.numeric(table_1_unmelt$Total)/sum(as.numeric(table_1_unmelt$Total))
as.numeric(table_1_unmelt$Total)/898
(as.numeric(table_1_unmelt$Total)/898)*100
colnames(dataset)
# análisis para hogares bipersonales
dataset_bi = filter(dataset, P6008 == 2)
VieW(dataset_bi)
View(dataset_bi)
dataset_bi = dataset_bi[c("DIRECTORIO", "SECUENCIA_P", "ORDEN", "P3271", "P6040", "p6008")]
dataset_bi = dataset_bi[c("DIRECTORIO", "SECUENCIA_P", "ORDEN", "P3271", "P6040", "P6008")]
dataset_bi
colnames(dataset_bi) = c("DIRECTORIO", "SECUENCIA_P", "ORDEN", "Sexo", "Edad", "Size")
dataset_bi
View(dataset_bi)
dataset_bi = dataset_bi %>% mutate(Int = cut(Edad, c(c(1, 4, 9, 14, 19, 31, 50, 70), Inf)))
help(cut)
dataset_bi = dataset_bi %>% mutate(Int = cut(Edad, c(c(1, 4, 9, 14, 19, 31, 50, 70), Inf), right = TRUE))
dataset_bi = dataset_bi %>% mutate(Int = cut(Edad, c(c(1, 4, 9, 14, 19, 31, 50, 70), Inf), right = FALSE))
dataset_bi = dataset_bi %>% mutate(Int = cut(Edad, c(c(1, 4, 9, 14, 19, 31, 51, 70), Inf), right = FALSE))
levels(as.factor(dataset_bi$Int))
table_2 = table(dataset_bi$Int, dataset_bi$Sexo)
View(table_2)
table_2 = as.data.frame(table(dataset_bi$Int, dataset_bi$Sexo))
colnames(table_2) = c("Grupo_edad", "Sexo", "Freq")
table_2$Sexo = factor(table_2$Sexo, levels = c(1,2), labels = c("Male", "Female"))
table_2_unmelt = dcast(data = table_2, Grupo_edad ~ Sexo, value.var = "Freq")
View(table_2_unmelt)
# análisis para hogares n-personales (n =2,3,4)
edades= c("[1,4)", "[4,9)", "[9,14)", "[14,19)", "[19,31)", "[31,51)",  "[51,70)",  "[70,Inf)")
edades
table_2_def = data.frame(edades)
table_2_def
table_2_def = data.frame(Grupo)
# análisis para hogares n-personales (n =2,3,4)
Grupo = c("[1,4)", "[4,9)", "[9,14)", "[14,19)", "[19,31)", "[31,51)",  "[51,70)",  "[70,Inf)")
table_2_def = data.frame(Grupo)
for (k in 2:4) {
dataset_bi = filter(dataset, P6008 == k)
dataset_bi = dataset_bi[c("DIRECTORIO", "SECUENCIA_P", "ORDEN", "P3271", "P6040", "P6008")]
colnames(dataset_bi) = c("DIRECTORIO", "SECUENCIA_P", "ORDEN", "Sexo", "Edad", "Size")
dataset_bi = dataset_bi %>% mutate(Int = cut(Edad, c(c(1, 4, 9, 14, 19, 31, 51, 70), Inf), right = FALSE))
table_2 = as.data.frame(table(dataset_bi$Int, dataset_bi$Sexo))
colnames(table_2) = c("Grupo", "Sexo", "Freq")
table_2$Sexo = factor(table_2$Sexo, levels = c(1,2), labels = c("Male", "Female"))
table_2_unmelt = dcast(data = table_2, Grupo ~ Sexo, value.var = "Freq")
colnames(table_2_unmelt) = c("Grupo", paste0("Male (n = ",k,")"), paste0("Female (n = ",k,")"))
table_2_def = merge(table_2_def, table_2_unmelt, by = "Grupo")
}
View(table_2_def)
View(table_1_unmelt)
OcupadosF
View(dataset)
ocupados_imputar = OcupadosF[c("DIRECTORIO", "SECUENCIA_P", "ORDEN", "INGLABO")]
View(ocupados_imputar)
#análisis de valores NA
summary(ocupados_imputar)
#análisis de valores NA
summary(ocupados_imputar$INGLABO)
library(xlsx)
library(mice)
install.packages("mice")
ocupados_imputar = OcupadosF[c("DIRECTORIO", "SECUENCIA_P", "ORDEN", "INGLABO")]
#análisis de valores NA
summary(ocupados_imputar$INGLABO)
#análisis de valores NA
knitr::kable(summary(ocupados_imputar$INGLABO))
#análisis de valores NA
knitr::kable(as.data.frame(summary(ocupados_imputar$INGLABO)))
#análisis de valores NA
knitr::kable(as.dataframe(summary(ocupados_imputar$INGLABO)))
#análisis de valores NA
knitr::kable(as.matrix(summary(ocupados_imputar$INGLABO)))
library(mice)
install.packages("VIM")
library(VIM)
# mapa de valores NA
mice_plot <- aggr(ocupados_imputar, col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(ocupados_imputar), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern"))
# imputación múltiple
imputed_ocupados <- mice(ocupados_imputar, m=5, maxit = 50, method = 'pmm')
# imputación múltiple
imputed_ocupados <- mice(ocupados_imputar, m=5, maxit = 50, method = 'pmm')
# imputación múltiple
imputed_ocupados <- mice(ocupados_imputar, m=3, maxit = 50, method = 'pmm')
ocupados_imputar$id = paste0(ocupados_imputar$DIRECTORIO,"-",ocupados_imputar$SECUENCIA_P,"-",ocupados_imputar$ORDEN)
ocupados_imputar = ocupados_imputar[c("id","INGLABO")]
#análisis de valores NA
knitr::kable(as.matrix(summary(ocupados_imputar$INGLABO)))
# mapa de valores NA
mice_plot <- aggr(ocupados_imputar, col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(ocupados_imputar), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern"))
# imputación múltiple
imputed_ocupados <- mice(ocupados_imputar, m=3, maxit = 50, method = 'pmm')
# imputación múltiple
imputed_ocupados <- mice(ocupados_imputar, m=5, maxit = 50, method = 'pmm')
summary(imputed_Data)
summary(imputed_ocupados)
# imputación múltiple
imputed_ocupados <- mice(ocupados_imputar, m=5, maxit = 50, method = 'pmm')
imputed_ocupados$imp$Sepal.Width
completeData <- complete(imputed_ocupados,2)
View(completeData)
imputed_ocupados$imp$INGLABO
na_ocupados_imputar = ocupados_imputar[is.na(ocupados_imputar$INGLABO),]
VieW(na_ocupados_imputar)
View(na_ocupados_imputar)
completeData <- complete(imputed_ocupados,2)
imputed_ocupados$imp$INGLABO
# revisar los valores imputados
knitr::kable(imputed_ocupados$imp$INGLABO, caption = "Imputación de ingresos corrientes para los individuos diferenciada según la base de datos. Método: imputación múltiple por ecuaciones encadenadas")
deciles_0 = quantile(dataset$INGLABO, probs = seq(.1,.9, by = .1))
deciles_0 = quantile(dataset$INGLABO, probs = seq(.1,.9, by = .1), na.rm = TRUE)
deciles_0
deciles_0 = quantile(dataset$INGLABO, probs = seq(.1,.9, by = .1), na.rm = TRUE)
deciles_0
complete(imputed_ocupados,2)
complete(imputed_ocupados,2)[,2]
deciles_1 = quantile(complete(imputed_ocupados,2)[,2], probs = seq(.1,.9, by = .1), na.rm = TRUE)
deciles_1 = quantile(complete(imputed_ocupados,1)[,2], probs = seq(.1,.9, by = .1), na.rm = TRUE)
deciles_2 = quantile(complete(imputed_ocupados,2)[,2], probs = seq(.1,.9, by = .1), na.rm = TRUE)
deciles_3 = quantile(complete(imputed_ocupados,3)[,2], probs = seq(.1,.9, by = .1), na.rm = TRUE)
deciles_4 = quantile(complete(imputed_ocupados,4)[,2], probs = seq(.1,.9, by = .1), na.rm = TRUE)
deciles_5 = quantile(complete(imputed_ocupados,5)[,2], probs = seq(.1,.9, by = .1), na.rm = TRUE)
data_frame_deciles = data.frame(deciles_0, deciles_1, deciles_2, deciles_3, deciles_4, deciles_5)
View(data_frame_deciles)
colnames(data_frame_deciles) = c("Original", "Imputada_1", "Imputada_2", "Imputada_3", "Imputada_4", "Imputada_5")
# análisis para hogares n-personales (n =2,3,4)
Grupo = c("[1,4)", "[4,9)", "[9,14)", "[14,19)", "[19,31)", "[31,51)",  "[51,70)",  "[70,Inf)")
table_2_def = data.frame(Grupo)
for (k in 2:4) {
dataset_bi = filter(dataset, P6008 == k)
dataset_bi = dataset_bi[c("DIRECTORIO", "SECUENCIA_P", "ORDEN", "P3271", "P6040", "P6008")]
colnames(dataset_bi) = c("DIRECTORIO", "SECUENCIA_P", "ORDEN", "Sexo", "Edad", "Size")
dataset_bi = dataset_bi %>% mutate(Int = cut(Edad, c(c(1, 4, 9, 14, 19, 31, 51, 70), Inf), right = FALSE))
table_2 = as.data.frame(table(dataset_bi$Int, dataset_bi$Sexo))
colnames(table_2) = c("Grupo", "Sexo", "Freq")
table_2$Sexo = factor(table_2$Sexo, levels = c(1,2), labels = c("Male", "Female"))
table_2_unmelt = dcast(data = table_2, Grupo ~ Sexo, value.var = "Freq")
colnames(table_2_unmelt) = c("Grupo", paste0("Male (n = ",k,")"), paste0("Female (n = ",k,")"))
table_2_def = merge(table_2_def, table_2_unmelt, by = "Grupo")
}
kable(table_2_def, caption = "Composición para tres tamaños de hogares en Cali: hogares conformados por dos, tres y cuatro personas. Fuente: GEIH")
